{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"\ud83d\udc4b Ol\u00e1, eu sou o Felipe Valboeno!","text":"<p>Sou desenvolvedor Java com foco em aplica\u00e7\u00f5es Spring Boot, APIs RESTful e integra\u00e7\u00e3o com banco de dados. Apaixonado por aprender novas tecnologias e resolver problemas com c\u00f3digo limpo e bem estruturado.</p>"},{"location":"about/#tecnologias-que-uso","title":"\ud83d\ude80 Tecnologias que uso","text":"<ul> <li>Java | Spring Boot | JPA | Hibernate</li> <li>JavaScript |</li> <li>Git | GitHub | GitLab</li> <li>SQL | MySQL | PostgreSQL</li> <li>BPMN, Docker, Grafana</li> </ul>"},{"location":"about/#projetos-em-destaque","title":"\ud83d\udccc Projetos em destaque","text":"<ul> <li>Projeto SpringBoot: Trata-se de um projeto de pr\u00e1tica e estudo das tecnologias SpringBoot, JPA/Hibernate utilizando o banco de dados em mem\u00f3ria H2 para os testes.</li> <li> <p>API de Produtos: Trata-se de um projeto base de CRUD completo com SpringBoot feito no vsCode. Muito \u00fatil para iniciantes terem uma base de CRUD no padr\u00e3o MVC com Spring.</p> </li> <li> </li> <li>Paschoalotto \u2013 Estagi\u00e1rio de MIS (Sistemas de Informa\u00e7\u00f5es Gerenciais)</li> <li>Stone Co. Linx \u2013 An\u00e1lise de Suporte</li> <li>Lecom Tecnologia \u2013 Programador</li> </ul>"},{"location":"about/#empresas-onde-ja-atuei","title":"\ud83c\udfe2 Empresas onde j\u00e1 atuei","text":""},{"location":"about/#interesses-pessoais","title":"\ud83c\udfaf Interesses pessoais","text":"<p>Al\u00e9m da tecnologia, gosto de me dedicar a hobbies que estimulam criatividade e foco, como:</p> <ul> <li>\ud83d\udcda Leitura de livros sobre produtividade, desenvolvimento pessoal. Autor preferido de fic\u00e7\u00e3o: Dan Brown.</li> <li>\ud83c\udfa7 Ouvir Rock, ou sons relaxantes enquanto trabalho.</li> <li>\u26bd Passeio com a esposa e nossas dogs.</li> <li>\ud83c\udfae Jogos no PS5</li> </ul> <p>Acredito que manter o equil\u00edbrio entre a vida pessoal e profissional \u00e9 essencial para uma carreira sustent\u00e1vel e criativa.</p>"},{"location":"about/#como-me-encontrar","title":"\ud83d\udceb Como me encontrar","text":"<ul> <li>Email: felipevalboeno@hotmail.com</li> <li>-&gt; Meu LinkedIn</li> </ul>"},{"location":"api/","title":"\ud83c\udf3f API Quick Reference","text":""},{"location":"api/#http-verbs","title":"\u2728 HTTP Verbs","text":"<p>GET</p> <p>\ud83d\udfe0 GET: Retrieve data from the server.</p> <p>POST</p> <p>\ud83d\udfe2 POST: Send data to the server to create a resource.</p> <p>PUT</p> <p>\ud83d\udd35 PUT: Send data to the server to update a resource.</p> <p>DELETE</p> <p>\ud83d\udd34 DELETE: Delete a resource from the server.</p> <p>PATCH</p> <p>\ud83d\udfe0 PATCH: Send data to the server to update a resource partially.</p> <p>TRACE</p> <p>\ud83d\udfe0 TRACE: Returns the full HTTP Request received by the server for debugging.</p> <p>OPTIONS</p> <p>\ud83d\udfe0 OPTIONS: Returns the HTTP methods supported by the server for the request URL.</p> <p>CONNECT</p> <p>\ud83d\udfe0 CONNECT: Converts the request connection to a transparent TCP/IP tunnel for secure communication.</p> <p>PURGE</p> <p>\ud83d\udfe1 PURGE: Invalidates a cached resource.</p> <p>LOCK</p> <p>\ud83d\udfe1 LOCK: Locks the resource for exclusive use by the client.</p> <p>UNLOCK</p> <p>\ud83d\udfe1 UNLOCK: Unlocks the resource previously locked by the client.</p> <p>MKCOL</p> <p>\ud83d\udfe0 MKCOL: Creates a new collection resource.</p> <p>COPY</p> <p>\ud83d\udfe0 COPY: Copies the resource identified by the request-URI to the destination URI.</p>"},{"location":"api/#http-status-codes","title":"\u2728 HTTP Status Codes","text":"<p>Informational</p> <ul> <li>100: Informational.</li> </ul> <p>Success</p> <ul> <li>200: Success.</li> </ul> <p>Redirection</p> <ul> <li>300: Redirection.</li> </ul> <p>Client Errors</p> <ul> <li>400: Client errors.</li> </ul> <p>Server Errors</p> <ul> <li>500: Server errors.</li> </ul>"},{"location":"api/#response-headers","title":"\u2728 Response Headers","text":"<p>Content-type</p> <p>\ud83d\udfe0 Content-type: Specifies the MIME type of the data in the response body.</p> <p>Content-length</p> <p>\ud83d\udfe0 Content-length: Specifies the length of the response body in bytes.</p> <p>Cache-control</p> <p>\ud83d\udfe0 Cache-control: Specifies the caching behavior of the response.</p> <p>Location</p> <p>\ud83d\udfe0 Location: Specifies the URI of a resource to retrieve the request resource.</p> <p>Server</p> <p>\ud83d\udfe0 Server: Name and version of the server software generating the response.</p> <p>Access-control-allow-origin</p> <p>\ud83d\udfe0 Access-control-allow-origin: Which origins are allowed to access the resource.</p> <p>Set-cookie</p> <p>\ud83d\udfe0 Set-cookie: Specifies a cookie to be stored by the client and sent back with future requests.</p> <p>Expires</p> <p>\ud83d\udfe0 Expires: Date/time after which the response is considered stale.</p> <p>Last-modified</p> <p>\ud83d\udfe0 Last-modified: Date/time that the resource was last modified.</p>"},{"location":"api/#api-design","title":"\u2728 API Design","text":"<p>REST</p> <p>\ud83d\udfe0 REST: Representational State Transfer, a design pattern for building web services.</p> <p>SOAP</p> <p>\ud83d\udfe0 SOAP: Simple Object Access Protocol, a messaging protocol for exchanging structured data.</p> <p>GraphQL</p> <p>\ud83d\udfe0 GraphQL: A query language and runtime for building APIs.</p> <p>API Gateway</p> <p>\ud83d\udfe0 API Gateway: A service that manages, protects, and scales APIs.</p>"},{"location":"api/#api-architectures","title":"\u2728 API Architectures","text":"<p>SOA</p> <p>\ud83d\udfe0 SOA: Service-Oriented Architecture, a style for building distributed systems.</p> <p>Microservices</p> <p>\ud83d\udfe0 Microservices: An architectural style for building applications as a suite of small independent services.</p> <p>Serverless</p> <p>\ud83d\udfe0 Serverless: Cloud execution model where the provider manages infrastructure and resources automatically.</p> <p>Event-Driven</p> <p>\ud83d\udfe0 Event-Driven: Flow of data between components is triggered by events.</p> <p>RESTful API</p> <p>\ud83d\udfe0 RESTful API: Uses HTTP requests to GET, POST, PUT, and DELETE data.</p>"},{"location":"api/#api-design-patterns","title":"\u2728 API Design Patterns","text":"<p>Adapter Pattern</p> <p>\ud83d\udfe0 Adapter Pattern: Converts the interface of a class into another interface that clients expect.</p> <p>Decorator Pattern</p> <p>\ud83d\udfe0 Decorator Pattern: Adds behaviors to an individual object dynamically.</p> <p>Proxy Pattern</p> <p>\ud83d\udfe0 Proxy Pattern: Provides a surrogate or placeholder to control access to another object.</p> <p>Chain of Responsibility</p> <p>\ud83d\udfe0 Chain of Responsibility Pattern: Delegates commands to a chain of processing objects.</p> <p>Observer Pattern</p> <p>\ud83d\udfe0 Observer Pattern: Defines a one-to-many dependency between objects; dependents update automatically when the object changes.</p>"},{"location":"api/#api-security","title":"\u2728 API Security","text":"<p>OAuth</p> <p>\ud83d\udfe0 OAuth: Open standard for authorization used for protecting APIs.</p> <p>JWT</p> <p>\ud83d\udfe0 JWT: JSON Web Tokens, a standard for securely transmitting information between parties.</p> <p>SSL/TLS</p> <p>\ud83d\udfe0 SSL/TLS: Protocol for establishing a secure connection between client and server.</p> <p>API Key</p> <p>\ud83d\udfe0 API Key: Secret token limiting requests to an API over a period.</p> <p>OpenID Connect</p> <p>\ud83d\udfe0 OpenID Connect: Authentication layer on top of OAuth for multi-domain user auth.</p> <p>CORS</p> <p>\ud83d\udfe0 Cross-Origin Resource Sharing (CORS): Allows resources on a webpage to be requested from another domain.</p>"},{"location":"api/#api-testing","title":"\u2728 API Testing","text":"<p>Postman</p> <p>\ud83d\udfe0 Postman: Popular tool for testing and debugging APIs.</p> <p>SoapUI</p> <p>\ud83d\udfe0 SoapUI: Tool for testing SOAP and REST web services.</p> <p>Swagger</p> <p>\ud83d\udfe0 Swagger: Tool for designing, building, and testing APIs.</p> <p>JMeter</p> <p>\ud83d\udfe0 JMeter: Tool for testing API performance.</p> <p>TestRail</p> <p>\ud83d\udfe0 TestRail: Test management tool for planning, executing, and tracking API tests.</p> <p>Dredd</p> <p>\ud83d\udfe0 Dredd: Command-line tool for testing API documentation against backend implementation.</p> <p>REST Assured</p> <p>\ud83d\udfe0 REST Assured: Java-based library for testing RESTful APIs.</p> <p>Karate DSL</p> <p>\ud83d\udfe0 Karate DSL: Testing framework for APIs using Gherkin syntax.</p> <p>HttpMaster</p> <p>\ud83d\udfe0 HttpMaster: Tool for testing and debugging APIs.</p> <p>Assertible</p> <p>\ud83d\udfe0 Assertible: Tool for testing and monitoring APIs with automated tests.</p>"},{"location":"docker/","title":"\ud83d\udc33 What is Docker?","text":"<p>Docker is a platform that allows you to run applications inside containers.</p> <p>Container = a small isolated box that contains everything your application needs to work (Java, database, libraries, lightweight operating system).</p> <p>This avoids the famous \u201cit works on my machine\u201d, because the container runs the same way in any environment (on your PC, on a server, or in the cloud).</p> <p></p>"},{"location":"docker/#practical-example","title":"Practical example:","text":"<p>You have a system in Java 17 + PostgreSQL 14. With Docker, you package this into a container and run it on any machine without manually installing the JDK or PostgreSQL.</p>"},{"location":"docker/#what-is-docker-compose","title":"\u2699\ufe0f What is Docker Compose?","text":"<p>Docker Compose is a tool that makes it easier when you need to run multiple containers together.</p> <p>You describe everything in a docker-compose.yml file.</p> <p>One command docker compose up starts all the services at once.</p> <p></p>"},{"location":"docker/#practical-example_1","title":"Practical example:","text":"<p>Your Java system needs:</p> <p>A container with your Java application (Spring Boot, for example).</p> <p>A container with PostgreSQL.</p> <p>A container with pgAdmin (to manage the database).</p> <p>Instead of running each one separately, the docker-compose.yml brings everything up at once, already configured.</p>"},{"location":"docker/#advantages-for-java-development","title":"Advantages for Java development","text":"<p>Standardized environment \u2013 you don\u2019t need to install JDK, database, Redis, etc. Everything comes ready in the container.</p> <p>Agility \u2013 with just a few commands, your project runs the same on any machine (dev, test, production).</p> <p>Isolation \u2013 different projects can use different Java versions without conflict.</p> <p>Disposable database \u2013 for testing, you can spin up a PostgreSQL container, experiment, and then remove it without leaving a mess.</p> <p>Easy integration \u2013 with Docker Compose you can simulate the whole application ecosystem (Java + database + messaging, etc.).</p>"},{"location":"docker/#in-summary","title":"In summary:","text":"<p>Docker = runs your application in isolated little boxes.</p> <p>Docker Compose = orchestrates multiple little boxes at the same time.</p> <p>For Java = less environment headache, more speed, and consistency from dev \u2192 staging \u2192 production.</p> <p>Quer que eu tamb\u00e9m adapte essa tradu\u00e7\u00e3o para um tom mais corporate/professional (tipo explica\u00e7\u00e3o para entrevista ou LinkedIn), ou manter nesse tom simples e did\u00e1tico?</p>"},{"location":"gestaoVagas/","title":"[Gest\u00e3o de Vagas] - Projeto Spring boot","text":""},{"location":"gestaoVagas/#gestao-de-vagas-projeto-spring-boot_1","title":"\ud83d\udcbc Gest\u00e3o de Vagas \u2014 Projeto Spring Boot","text":"<p>\ud83d\ude80 Descri\u00e7\u00e3o Geral</p> <p>Este projeto foi desenvolvido utilizando o Spring Framework e a linguagem Java, abordando conceitos essenciais da Programa\u00e7\u00e3o Orientada a Objetos (POO) e boas pr\u00e1ticas de arquitetura. O sistema tem como objetivo oferecer uma plataforma de cadastro e gerenciamento de vagas de tecnologia, onde:</p> <ul> <li>\ud83c\udfe2 Empresas podem realizar seu cadastro e publicar vagas.  </li> <li>\ud83d\udc69\u200d\ud83d\udcbb Candidatos podem criar perfis, visualizar oportunidades e se candidatar.</li> </ul> <p>\ud83e\udde9 Principais Tecnologias e Recursos Utilizados</p> <ul> <li>Spring Boot, Spring Security, Spring Data JPA</li> <li>Thymeleaf integrado com TailwindCSS (Front-end)</li> <li>Swagger para documenta\u00e7\u00e3o dos endpoints</li> <li>JUnit e Mockito para testes unit\u00e1rios</li> <li>Prometheus para monitoramento da aplica\u00e7\u00e3o</li> <li>Princ\u00edpios SOLID e boas pr\u00e1ticas de clean code</li> </ul> <p>\ud83d\udc33 Infraestrutura e Deploy</p> <p>A aplica\u00e7\u00e3o \u00e9 totalmente conteinerizada com Docker, utilizando imagens hospedadas no DockerHub, e foi implantada na AWS (EC2 e RDS).  </p> <p>Al\u00e9m disso: - \u2699\ufe0f Foram configurados GitHub Actions para CI/CD. - \ud83d\udd10 As secrets e vari\u00e1veis de ambiente s\u00e3o gerenciadas via GitHub. - \ud83c\udf10 Conex\u00e3o com o RDS (MySQL) feita diretamente via extens\u00e3o de banco de dados no VS Code.</p> <p>Exemplo de host usado na conex\u00e3o:</p> <pre><code>db-gestao-vagas.c96cuumyu0ti.us-east-2.rds.amazonaws.com\n</code></pre>"},{"location":"gestaoVagas/#demonstracao-do-projeto","title":"Demonstra\u00e7\u00e3o do Projeto","text":""},{"location":"gestaoVagas/#boas-praticas-em-programacao-orientadaa-objetos-utilizadas-nesse-projeto","title":"# Boas pr\u00e1ticas em programa\u00e7\u00e3o Orientadaa Objetos utilizadas nesse projeto","text":"<ul> <li>Single Responsability (SOLID)  </li> <li>KISS  </li> <li>YAGNI  </li> <li>Unit tests  </li> <li>Integration tests  </li> <li>JavaDoc</li> </ul>"},{"location":"gestaoVagas/#ferramentas-de-monitoramento-utilizadas","title":"# \ud83d\udcc8Ferramentas de monitoramento utilizadas","text":"<p>Nesse projeto utilizei apenas o Prometheus no final. Teste os endpoints:</p> <ul> <li>Health</li> <li>Metrics</li> <li>Prometheus</li> </ul> <p>Obs: devido a limita\u00e7\u00f5es de hardware, precisei retirar o Grafana do projeto at\u00e9 expandir meu SSD pra utilizar maiores imagens no docker.</p> <ul> <li>Swagger UI</li> </ul> <p></p> <p></p> <p></p> <ul> <li>Java  </li> <li>SpringBoot</li> </ul> <p>\ud83d\udc64 Cliente / Frontend  - HTTP Request (GET, POST, PUT, DELETE)  </p> <p>\ud83d\udc47</p> <p>\ud83d\udcdd Controller (JobController) - Recebe request - Valida input / DTO - Pega companyId / path params / headers - Chama Use Case correspondente  </p> <p>\ud83d\udc47</p> <p>\u2699\ufe0f Use Case - L\u00f3gica de neg\u00f3cio - Valida regras - Prepara entidade - Chama Repository  </p> <p>\ud83d\udc47</p> <p>\ud83d\udcbe Repository (JobRepository) - Acessa banco de dados - Cria, atualiza, deleta ou busca dados  </p>"},{"location":"gestaoVagas/#docmentacao","title":"Docmenta\u00e7\u00e3o","text":"<p>Swagger documentation:</p>"},{"location":"gestaoVagas/#endpoints","title":"Endpoints:","text":"<ul> <li>Job listing</li> <li>Job registration</li> <li>Delete job</li> <li>Candidate Auth</li> <li>Job Apply</li> <li>Candidate profile</li> <li>Candidate Register</li> <li>Job listing by candidate</li> <li>Company register</li> <li>Auth company</li> </ul> <p>Swagger endpoints</p>"},{"location":"gestaoVagas/#back-end","title":"Back-end","text":""},{"location":"gestaoVagas/#fluxo-de-atualizacao-de-vagas","title":"\ud83c\udfd7 Fluxo de Atualiza\u00e7\u00e3o de Vagas","text":""},{"location":"gestaoVagas/#estrutura-do-projeto-backend","title":"Estrutura do projeto BackEnd","text":"<pre><code>\u251c\u2500\u2500 src/main/java/br/com/felipevalboeno/gestao_vagas/\n\u2502 \u251c\u2500\u2500 config/\n\u2502 \u251c\u2500\u2500 exceptions/\n\u2502 \u251c\u2500\u2500 modules/\n\u2502 \u2502 \u251c\u2500\u2500 candidate/\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 controllers\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 dto\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 entity\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 repository\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 useCases\n\u2502 \u2502 \u251c\u2500\u2500 company/\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 controllers\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 dto\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 entity\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 repository\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 useCasess\n\u2502 \u2502 \u2514\u2500\u2500 ...\n\u2502 \u251c\u2500\u2500 providers/\n\u2502 \u2514\u2500\u2500 security/\n\u2514\u2500\u2500 application.properties\n</code></pre>"},{"location":"gestaoVagas/#front-end","title":"Front-end","text":"<ul> <li>Tailwind  </li> <li>RestTemplate para conectar com o backend</li> </ul>"},{"location":"gestaoVagas/#pages","title":"Pages","text":""},{"location":"gestaoVagas/#candidato","title":"Candidato","text":""},{"location":"gestaoVagas/#empresa","title":"Empresa","text":""},{"location":"gestaoVagas/#deploy-com-render","title":"Deploy com Render","text":"<p>Pra subir essa aplica\u00e7\u00e3o, usei o Render (cloud hosting) por ter uma vers\u00e3o gr\u00e1tis pra estudo.</p>"},{"location":"gestaoVagas/#como-fazer-isso","title":"Como fazer isso?","text":"<ul> <li>Fa\u00e7a login no Render usando sua conta do GitHub</li> <li>Fa\u00e7a as primeiras configura\u00e7\u00f5es simples, como configurar nome, banco de dados...</li> <li>Crie um dockerfile no seu projeto com a configura\u00e7\u00e3o do dockerfile config vista mais abaixo.</li> <li>Crie umnovo web service no Render, e fa\u00e7a o deploy com seu \u00faltimo commit no git.</li> </ul> <pre><code># =========================\n# Stage 1: Build\n# =========================\nFROM maven:3.9.3-eclipse-temurin-17 AS build\n\n# Define diret\u00f3rio de trabalho\nWORKDIR /app\n\n# Copia apenas o pom.xml para cache do Maven\nCOPY pom.xml .\n\n# Baixa depend\u00eancias sem reconstruir c\u00f3digo\nRUN mvn dependency:go-offline -B\n\n# Copia o c\u00f3digo-fonte\nCOPY src ./src\n\n# Build do projeto, gera o .jar\nRUN mvn clean package -DskipTests\n\n# =========================\n# Stage 2: Runtime\n# =========================\nFROM openjdk:17-jdk-slim\n\n# Define diret\u00f3rio de trabalho\nWORKDIR /app\n\n# Copia o .jar do stage de build\nCOPY --from=build /app/target/gestao_vagas-0.0.1-SNAPSHOT.jar app.jar\n\n# Exp\u00f5e a porta do Spring Boot\nEXPOSE 8080\n\n# Comando para rodar a aplica\u00e7\u00e3o\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n\n\nENTRYPOINT [ \"java\", \"-jar\", \"app.jar\" ]\n</code></pre> <pre><code>name: Gest\u00e3o de Vagas Application\non: \n    push:\n        branches: [main]\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Set up Java\n              uses: actions/setup-java@v3\n              with:\n                distribution: temurin\n                java-version: 17\n            - name: Build project\n              run: mvn clean install\n            - name: login docker\n              run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}\n            - name: Build docker image\n              run: docker build -t felipevalboenodocker/gestao_vagas .\n            - name: Publish image\n              run: docker push felipevalboenodocker/gestao_vagas        \n</code></pre>"},{"location":"gestaoVagas/#criando-um-banco-de-dados-e-webserver-na-aws-com-rds-e-ec2","title":"Criando um banco de dados e webserver na AWS com RDS e EC2","text":"<ul> <li>Crie uma conta na Amazon AWS </li> <li>Pesquise por RDS e v\u00e1 em criar banco de dados  </li> <li>Escolhaa standard creation &gt; PostgreSQL &gt; Models: Free tier &gt; Create database  </li> <li>Pesquise por EC2  </li> <li>AMI - Kernel6.1 - free &gt; Instance: t3.MICRO - free  </li> <li>Crie um par de chaves: RSA &gt; .pem  </li> <li>Execute a instancia e fa\u00e7a a conex\u00e3o</li> </ul>"},{"location":"gestaoVagas/#criando-dockerhub","title":"Criando DockerHub","text":"<ul> <li>Com o DockerHub, voc\u00ea pode salvar uma imagem pronta pra uso da sua aplica\u00e7\u00e3o, da mesma forma que voc\u00ea salva seu c\u00f3digo no GitHub.</li> <li>Voc\u00ea s\u00f3 precisa de um arquivo .yml na raiz do seu projeto, o meu ficou assim:</li> </ul>"},{"location":"gestaoVagas/#obs","title":"OBS:","text":"<ul> <li>I used Putty to configure the Docker on EC2 AWS.</li> <li>I used a Database Client extension to conect a new postgrSQL to EC2 endpoint, and I change the DTABASE_URL on github to this new database that I create.</li> </ul>"},{"location":"gestaoVagas/#how-to-start-the-application-after-all-this-configurations","title":"How to start the application after all this configurations","text":"<ol> <li>Open your Putty app</li> <li>Connect on the saved session </li> <li>execute: cd ~/actions-runner</li> <li>Check on your github if the runner ar online, if not, execute: ./run.sh</li> <li>execute: docker start gestao-vagas </li> <li>execute: docker ps </li> <li>execute: docker logs gestao_vagas , check if the application started as well</li> <li>Open Swagger: http://:8080/swagger-ui/index.html an do a test."},{"location":"solid/","title":"\ud83c\udf3f SOLID","text":""},{"location":"solid/#http-verbs","title":"\u2728 HTTP Verbs","text":"<p>GET</p> <p>\ud83d\udfe0 GET: Retrieve data from the server.</p> <p>POST</p> <p>\ud83d\udfe2 POST: Send data to the server to create a resource.</p> <p>PUT</p> <p>\ud83d\udd35 PUT: Send data to the server to update a resource.</p> <p>DELETE</p> <p>\ud83d\udd34 DELETE: Delete a resource from the server.</p> <p>PATCH</p> <p>\ud83d\udfe0 PATCH: Send data to the server to update a resource partially.</p> <p>TRACE</p> <p>\ud83d\udfe0 TRACE: Returns the full HTTP Request received by the server for debugging.</p> <p>OPTIONS</p> <p>\ud83d\udfe0 OPTIONS: Returns the HTTP methods supported by the server for the request URL.</p> <p>CONNECT</p> <p>\ud83d\udfe0 CONNECT: Converts the request connection to a transparent TCP/IP tunnel for secure communication.</p> <p>PURGE</p> <p>\ud83d\udfe1 PURGE: Invalidates a cached resource.</p> <p>LOCK</p> <p>\ud83d\udfe1 LOCK: Locks the resource for exclusive use by the client.</p> <p>UNLOCK</p> <p>\ud83d\udfe1 UNLOCK: Unlocks the resource previously locked by the client.</p> <p>MKCOL</p> <p>\ud83d\udfe0 MKCOL: Creates a new collection resource.</p> <p>COPY</p> <p>\ud83d\udfe0 COPY: Copies the resource identified by the request-URI to the destination URI.</p>"}]}