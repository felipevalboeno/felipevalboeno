{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"APP Gest\u00e3o de Vagas <p>Projeto Java + SpringBoot.</p> Projeto de Gerador de Certificado <p>Angular</p> Projeto base: CRUD de Cursos <p>Java + SpringBoot + Thymeleaf</p> Projeto base: Pagamento com Strip <p>Java + SpringBoot + Thymeleaf</p>"},{"location":"about/","title":"\ud83d\udc4b Ol\u00e1, eu sou o Felipe Valboeno!","text":"<p>\ud83d\udcbb Desenvolvedor Java | Spring Boot | APIs REST | Banco de Dados</p> <p>Sou apaixonado por criar aplica\u00e7\u00f5es escal\u00e1veis e bem estruturadas. Gosto de resolver problemas com c\u00f3digo limpo, boas pr\u00e1ticas e arquiteturas s\u00f3lidas.</p>"},{"location":"about/#um-pouco-da-minha-jornada","title":"\ud83e\udded Um pouco da minha jornada","text":"<p>Sabia que quase fui geof\u00edsico? \ud83d\ude05 Pois \u00e9! Cursei mais de um ano de Geof\u00edsica na Universidade Federal do Pampa (RS). Depois de muitas horas no sol estudando afloramentos, percebi que minha verdadeira paix\u00e3o era a programa\u00e7\u00e3o. Tamb\u00e9m tive contato com Matlab na faculdade, o que me fez mergulhar de vez no mundo da computa\u00e7\u00e3o.</p> <p>\ud83c\udf93 Sou formado em Ci\u00eancia da Computa\u00e7\u00e3o, e meu TCC foi sobre  </p> <p>Aprendizado de M\u00e1quina Explic\u00e1vel Aplicado na Classifica\u00e7\u00e3o de Sintomas da Depress\u00e3o.</p>"},{"location":"about/#fora-do-codigo","title":"\u2615 Fora do c\u00f3digo...","text":"<p>Quando n\u00e3o estou programando, gosto de: - \u270f\ufe0f Desenhar - \ud83c\udfae Jogar no PS5 - \ud83c\udfac Assistir filmes de terror - \ud83c\udf3f Explorar a natureza</p> <p>Acredito que um bom desenvolvedor tamb\u00e9m precisa se inspirar fora da tela. \ud83d\ude09</p>   \ud83d\udcac _\"C\u00f3digo limpo \u00e9 poesia em movimento.\"_"},{"location":"api/","title":"\ud83c\udf3f API Quick Reference","text":""},{"location":"api/#http-verbs","title":"\u2728 HTTP Verbs","text":"<p>GET</p> <p>\ud83d\udfe0 GET: Retrieve data from the server.</p> <p>POST</p> <p>\ud83d\udfe2 POST: Send data to the server to create a resource.</p> <p>PUT</p> <p>\ud83d\udd35 PUT: Send data to the server to update a resource.</p> <p>DELETE</p> <p>\ud83d\udd34 DELETE: Delete a resource from the server.</p> <p>PATCH</p> <p>\ud83d\udfe0 PATCH: Send data to the server to update a resource partially.</p> <p>TRACE</p> <p>\ud83d\udfe0 TRACE: Returns the full HTTP Request received by the server for debugging.</p> <p>OPTIONS</p> <p>\ud83d\udfe0 OPTIONS: Returns the HTTP methods supported by the server for the request URL.</p> <p>CONNECT</p> <p>\ud83d\udfe0 CONNECT: Converts the request connection to a transparent TCP/IP tunnel for secure communication.</p> <p>PURGE</p> <p>\ud83d\udfe1 PURGE: Invalidates a cached resource.</p> <p>LOCK</p> <p>\ud83d\udfe1 LOCK: Locks the resource for exclusive use by the client.</p> <p>UNLOCK</p> <p>\ud83d\udfe1 UNLOCK: Unlocks the resource previously locked by the client.</p> <p>MKCOL</p> <p>\ud83d\udfe0 MKCOL: Creates a new collection resource.</p> <p>COPY</p> <p>\ud83d\udfe0 COPY: Copies the resource identified by the request-URI to the destination URI.</p>"},{"location":"api/#http-status-codes","title":"\u2728 HTTP Status Codes","text":"<p>Informational</p> <ul> <li>100: Informational.</li> </ul> <p>Success</p> <ul> <li>200: Success.</li> </ul> <p>Redirection</p> <ul> <li>300: Redirection.</li> </ul> <p>Client Errors</p> <ul> <li>400: Client errors.</li> </ul> <p>Server Errors</p> <ul> <li>500: Server errors.</li> </ul>"},{"location":"api/#response-headers","title":"\u2728 Response Headers","text":"<p>Content-type</p> <p>\ud83d\udfe0 Content-type: Specifies the MIME type of the data in the response body.</p> <p>Content-length</p> <p>\ud83d\udfe0 Content-length: Specifies the length of the response body in bytes.</p> <p>Cache-control</p> <p>\ud83d\udfe0 Cache-control: Specifies the caching behavior of the response.</p> <p>Location</p> <p>\ud83d\udfe0 Location: Specifies the URI of a resource to retrieve the request resource.</p> <p>Server</p> <p>\ud83d\udfe0 Server: Name and version of the server software generating the response.</p> <p>Access-control-allow-origin</p> <p>\ud83d\udfe0 Access-control-allow-origin: Which origins are allowed to access the resource.</p> <p>Set-cookie</p> <p>\ud83d\udfe0 Set-cookie: Specifies a cookie to be stored by the client and sent back with future requests.</p> <p>Expires</p> <p>\ud83d\udfe0 Expires: Date/time after which the response is considered stale.</p> <p>Last-modified</p> <p>\ud83d\udfe0 Last-modified: Date/time that the resource was last modified.</p>"},{"location":"api/#api-design","title":"\u2728 API Design","text":"<p>REST</p> <p>\ud83d\udfe0 REST: Representational State Transfer, a design pattern for building web services.</p> <p>SOAP</p> <p>\ud83d\udfe0 SOAP: Simple Object Access Protocol, a messaging protocol for exchanging structured data.</p> <p>GraphQL</p> <p>\ud83d\udfe0 GraphQL: A query language and runtime for building APIs.</p> <p>API Gateway</p> <p>\ud83d\udfe0 API Gateway: A service that manages, protects, and scales APIs.</p>"},{"location":"api/#api-architectures","title":"\u2728 API Architectures","text":"<p>SOA</p> <p>\ud83d\udfe0 SOA: Service-Oriented Architecture, a style for building distributed systems.</p> <p>Microservices</p> <p>\ud83d\udfe0 Microservices: An architectural style for building applications as a suite of small independent services.</p> <p>Serverless</p> <p>\ud83d\udfe0 Serverless: Cloud execution model where the provider manages infrastructure and resources automatically.</p> <p>Event-Driven</p> <p>\ud83d\udfe0 Event-Driven: Flow of data between components is triggered by events.</p> <p>RESTful API</p> <p>\ud83d\udfe0 RESTful API: Uses HTTP requests to GET, POST, PUT, and DELETE data.</p>"},{"location":"api/#api-design-patterns","title":"\u2728 API Design Patterns","text":"<p>Adapter Pattern</p> <p>\ud83d\udfe0 Adapter Pattern: Converts the interface of a class into another interface that clients expect.</p> <p>Decorator Pattern</p> <p>\ud83d\udfe0 Decorator Pattern: Adds behaviors to an individual object dynamically.</p> <p>Proxy Pattern</p> <p>\ud83d\udfe0 Proxy Pattern: Provides a surrogate or placeholder to control access to another object.</p> <p>Chain of Responsibility</p> <p>\ud83d\udfe0 Chain of Responsibility Pattern: Delegates commands to a chain of processing objects.</p> <p>Observer Pattern</p> <p>\ud83d\udfe0 Observer Pattern: Defines a one-to-many dependency between objects; dependents update automatically when the object changes.</p>"},{"location":"api/#api-security","title":"\u2728 API Security","text":"<p>OAuth</p> <p>\ud83d\udfe0 OAuth: Open standard for authorization used for protecting APIs.</p> <p>JWT</p> <p>\ud83d\udfe0 JWT: JSON Web Tokens, a standard for securely transmitting information between parties.</p> <p>SSL/TLS</p> <p>\ud83d\udfe0 SSL/TLS: Protocol for establishing a secure connection between client and server.</p> <p>API Key</p> <p>\ud83d\udfe0 API Key: Secret token limiting requests to an API over a period.</p> <p>OpenID Connect</p> <p>\ud83d\udfe0 OpenID Connect: Authentication layer on top of OAuth for multi-domain user auth.</p> <p>CORS</p> <p>\ud83d\udfe0 Cross-Origin Resource Sharing (CORS): Allows resources on a webpage to be requested from another domain.</p>"},{"location":"api/#api-testing","title":"\u2728 API Testing","text":"<p>Postman</p> <p>\ud83d\udfe0 Postman: Popular tool for testing and debugging APIs.</p> <p>SoapUI</p> <p>\ud83d\udfe0 SoapUI: Tool for testing SOAP and REST web services.</p> <p>Swagger</p> <p>\ud83d\udfe0 Swagger: Tool for designing, building, and testing APIs.</p> <p>JMeter</p> <p>\ud83d\udfe0 JMeter: Tool for testing API performance.</p> <p>TestRail</p> <p>\ud83d\udfe0 TestRail: Test management tool for planning, executing, and tracking API tests.</p> <p>Dredd</p> <p>\ud83d\udfe0 Dredd: Command-line tool for testing API documentation against backend implementation.</p> <p>REST Assured</p> <p>\ud83d\udfe0 REST Assured: Java-based library for testing RESTful APIs.</p> <p>Karate DSL</p> <p>\ud83d\udfe0 Karate DSL: Testing framework for APIs using Gherkin syntax.</p> <p>HttpMaster</p> <p>\ud83d\udfe0 HttpMaster: Tool for testing and debugging APIs.</p> <p>Assertible</p> <p>\ud83d\udfe0 Assertible: Tool for testing and monitoring APIs with automated tests.</p>"},{"location":"crud_cursos/","title":"\ud83d\udcbc Projeto Java: API RESTful com CRUD Completo","text":"<p>Este projeto consiste na constru\u00e7\u00e3o de uma API RESTful utilizando Java com Spring Boot, JPA e PostgreSQL (Dbeaver). Ele implementa as opera\u00e7\u00f5es completas de CRUD (Create, Read, Update, Delete) em uma estrutura MVC, al\u00e9m de aplicar o padr\u00e3o DTO para transfer\u00eancia de dados entre as camadas e utilizar a biblioteca ModelMapper para facilitar o mapeamento entre entidades e DTOs.</p>"},{"location":"crud_cursos/#demonstracao-do-projeto","title":"Demonstra\u00e7\u00e3o do Projeto","text":"<p>\ud83d\ude80 Tecnologias Utilizadas</p> <ul> <li>Java 17+</li> <li>PostgreSQL </li> <li>Dbeaver</li> <li>Spring Boot</li> </ul>"},{"location":"crud_cursos/#dependecias","title":"Depend\u00eacias","text":"<ul> <li>Spring Data JPA</li> <li>ModelMapper</li> <li>Spring Actuator</li> <li>Spring Web</li> <li>Spring DevTools</li> <li>Spring Validation</li> <li>PostgreSql</li> <li>Thymeleaf</li> <li>Lombok</li> </ul>"},{"location":"crud_cursos/#documentacao-e-teste","title":"Documenta\u00e7\u00e3o e teste","text":"<ul> <li>Swagger   </li> </ul>"},{"location":"docker/","title":"\ud83d\udc33 What is Docker?","text":"<p>Docker is a platform that allows you to run applications inside containers.</p> <p>Container = a small isolated box that contains everything your application needs to work (Java, database, libraries, lightweight operating system).</p> <p>This avoids the famous \u201cit works on my machine\u201d, because the container runs the same way in any environment (on your PC, on a server, or in the cloud).</p> <p></p>"},{"location":"docker/#practical-example","title":"Practical example:","text":"<p>You have a system in Java 17 + PostgreSQL 14. With Docker, you package this into a container and run it on any machine without manually installing the JDK or PostgreSQL.</p>"},{"location":"docker/#what-is-docker-compose","title":"\u2699\ufe0f What is Docker Compose?","text":"<p>Docker Compose is a tool that makes it easier when you need to run multiple containers together.</p> <p>You describe everything in a docker-compose.yml file.</p> <p>One command docker compose up starts all the services at once.</p> <p></p>"},{"location":"docker/#practical-example_1","title":"Practical example:","text":"<p>Your Java system needs:</p> <p>A container with your Java application (Spring Boot, for example).</p> <p>A container with PostgreSQL.</p> <p>A container with pgAdmin (to manage the database).</p> <p>Instead of running each one separately, the docker-compose.yml brings everything up at once, already configured.</p>"},{"location":"docker/#advantages-for-java-development","title":"Advantages for Java development","text":"<p>Standardized environment \u2013 you don\u2019t need to install JDK, database, Redis, etc. Everything comes ready in the container.</p> <p>Agility \u2013 with just a few commands, your project runs the same on any machine (dev, test, production).</p> <p>Isolation \u2013 different projects can use different Java versions without conflict.</p> <p>Disposable database \u2013 for testing, you can spin up a PostgreSQL container, experiment, and then remove it without leaving a mess.</p> <p>Easy integration \u2013 with Docker Compose you can simulate the whole application ecosystem (Java + database + messaging, etc.).</p>"},{"location":"docker/#in-summary","title":"In summary:","text":"<p>Docker = runs your application in isolated little boxes.</p> <p>Docker Compose = orchestrates multiple little boxes at the same time.</p> <p>For Java = less environment headache, more speed, and consistency from dev \u2192 staging \u2192 production.</p> <p>Quer que eu tamb\u00e9m adapte essa tradu\u00e7\u00e3o para um tom mais corporate/professional (tipo explica\u00e7\u00e3o para entrevista ou LinkedIn), ou manter nesse tom simples e did\u00e1tico?</p>"},{"location":"geradorCertificado/","title":"\ud83d\udcbc Projeto Angular: Gerador de certificado","text":""},{"location":"geradorCertificado/#demonstracao-do-projeto","title":"Demonstra\u00e7\u00e3o do Projeto","text":"<p>\ud83c\udf93 Descri\u00e7\u00e3o Geral</p> <p>Este projeto, faz parte do curso introdut\u00f3rio de Angular da Rocketseat, com 10h de dura\u00e7\u00e3o.</p> <p>\u2699\ufe0f Tecnologias Utilizadas - Angular CLI v20 - Node v22 - HTML - CSS - TypeScript - Figma - Netlify</p>"},{"location":"geradorCertificado/#repositorio-git-do-projeto","title":"\ud83d\udd8c\ufe0f Reposit\u00f3rio Git do projeto:","text":"<p>Acesse o Figma do projeto</p>"},{"location":"geradorCertificado/#figma-do-projeto","title":"\ud83d\udd8c\ufe0f Figma do projeto:","text":"<p>Acesse o Figma do projeto</p>"},{"location":"geradorCertificado/#link-da-aplicacao-no-netlify-para-teste-em-producao","title":"\ud83d\udcbb Link da aplica\u00e7\u00e3o no Netlify para teste em produ\u00e7\u00e3o","text":"<p>Acesse o projeto em produ\u00e7\u00e3o</p>"},{"location":"gestaoVagas/","title":"\ud83d\udcbc Gest\u00e3o de Vagas \u2014 Projeto Spring Boot","text":"<p>\ud83d\ude80 Descri\u00e7\u00e3o Geral</p> <p>Este projeto foi desenvolvido utilizando o Spring Framework e a linguagem Java, abordando conceitos essenciais da Programa\u00e7\u00e3o Orientada a Objetos (POO) e boas pr\u00e1ticas de arquitetura. O sistema tem como objetivo oferecer uma plataforma de cadastro e gerenciamento de vagas de tecnologia, onde:</p> <ul> <li>\ud83c\udfe2 Empresas podem realizar seu cadastro e publicar vagas.  </li> <li>\ud83d\udc69\u200d\ud83d\udcbb Candidatos podem criar perfis, visualizar oportunidades e se candidatar.</li> </ul> <p>\ud83e\udde9 Principais Tecnologias e Recursos Utilizados</p> <ul> <li>Spring Boot, Spring Security, Spring Data JPA</li> <li>Thymeleaf integrado com TailwindCSS (Front-end)</li> <li>Swagger para documenta\u00e7\u00e3o dos endpoints</li> <li>JUnit e Mockito para testes unit\u00e1rios</li> <li>Prometheus para monitoramento da aplica\u00e7\u00e3o</li> <li>Princ\u00edpios SOLID e boas pr\u00e1ticas de clean code</li> </ul> <p>\ud83d\udc33 Infraestrutura e Deploy</p> <p>A aplica\u00e7\u00e3o \u00e9 totalmente conteinerizada com Docker, utilizando imagens hospedadas no DockerHub, e foi implantada na AWS (EC2 e RDS).  </p> <p>Al\u00e9m disso: - \u2699\ufe0f Foram configurados GitHub Actions para CI/CD. - \ud83d\udd10 As secrets e vari\u00e1veis de ambiente s\u00e3o gerenciadas via GitHub. - \ud83c\udf10 Conex\u00e3o com o RDS (MySQL) feita diretamente via extens\u00e3o de banco de dados no VS Code.</p> <p>Exemplo de host usado na conex\u00e3o:</p> <pre><code>db-gestao-vagas.c96cuumyu0ti.us-east-2.rds.amazonaws.com\n</code></pre>"},{"location":"gestaoVagas/#demonstracao-do-projeto","title":"Demonstra\u00e7\u00e3o do Projeto","text":""},{"location":"gestaoVagas/#boas-praticas-em-programacao-orientadaa-objetos-utilizadas-nesse-projeto","title":"# Boas pr\u00e1ticas em programa\u00e7\u00e3o Orientadaa Objetos utilizadas nesse projeto","text":"<ul> <li>Single Responsability (SOLID)  </li> <li>KISS  </li> <li>YAGNI  </li> <li>Unit tests  </li> <li>Integration tests  </li> <li>JavaDoc</li> </ul>"},{"location":"gestaoVagas/#ferramentas-de-monitoramento-utilizadas","title":"# \ud83d\udcc8Ferramentas de monitoramento utilizadas","text":"<p>Nesse projeto utilizei apenas o Prometheus no final. Teste os endpoints:</p> <ul> <li>Health</li> <li>Metrics</li> <li>Prometheus</li> </ul> <p>Obs: devido a limita\u00e7\u00f5es de hardware, precisei retirar o Grafana do projeto at\u00e9 expandir meu SSD pra utilizar maiores imagens no docker.</p>"},{"location":"gestaoVagas/#docmentacao","title":"Docmenta\u00e7\u00e3o","text":"<p>Swagger documentation:</p> <ul> <li>Swagger UI</li> </ul>"},{"location":"gestaoVagas/#endpoints","title":"Endpoints:","text":"<ul> <li>Job listing</li> <li>Job registration</li> <li>Delete job</li> <li>Candidate Auth</li> <li>Job Apply</li> <li>Candidate profile</li> <li>Candidate Register</li> <li>Job listing by candidate</li> <li>Company register</li> <li>Auth company</li> </ul> <p>Swagger endpoints</p> <p></p> <p></p> <p></p>"},{"location":"gestaoVagas/#back-end","title":"Back-end","text":"<ul> <li>Java  </li> <li>SpringBoot</li> </ul>"},{"location":"gestaoVagas/#fluxo-de-atualizacao-de-vagas","title":"\ud83c\udfd7 Fluxo de Atualiza\u00e7\u00e3o de Vagas","text":"<p>\ud83d\udc64 Cliente / Frontend  - HTTP Request (GET, POST, PUT, DELETE)  </p> <p>\ud83d\udc47</p> <p>\ud83d\udcdd Controller (JobController) - Recebe request - Valida input / DTO - Pega companyId / path params / headers - Chama Use Case correspondente  </p> <p>\ud83d\udc47</p> <p>\u2699\ufe0f Use Case - L\u00f3gica de neg\u00f3cio - Valida regras - Prepara entidade - Chama Repository  </p> <p>\ud83d\udc47</p> <p>\ud83d\udcbe Repository (JobRepository) - Acessa banco de dados - Cria, atualiza, deleta ou busca dados  </p>"},{"location":"gestaoVagas/#estrutura-do-projeto-backend","title":"Estrutura do projeto BackEnd","text":"<pre><code>\u251c\u2500\u2500 src/main/java/br/com/felipevalboeno/gestao_vagas/\n\u2502 \u251c\u2500\u2500 config/\n\u2502 \u251c\u2500\u2500 exceptions/\n\u2502 \u251c\u2500\u2500 modules/\n\u2502 \u2502 \u251c\u2500\u2500 candidate/\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 controllers\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 dto\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 entity\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 repository\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 useCases\n\u2502 \u2502 \u251c\u2500\u2500 company/\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 controllers\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 dto\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 entity\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 repository\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 useCasess\n\u2502 \u2502 \u2514\u2500\u2500 ...\n\u2502 \u251c\u2500\u2500 providers/\n\u2502 \u2514\u2500\u2500 security/\n\u2514\u2500\u2500 application.properties\n</code></pre>"},{"location":"gestaoVagas/#front-end","title":"Front-end","text":"<ul> <li>Tailwind  </li> <li>RestTemplate para conectar com o backend</li> </ul>"},{"location":"gestaoVagas/#pages","title":"Pages","text":""},{"location":"gestaoVagas/#candidato","title":"Candidato","text":""},{"location":"gestaoVagas/#empresa","title":"Empresa","text":""},{"location":"gestaoVagas/#deploy-com-render","title":"Deploy com Render","text":"<p>Pra subir essa aplica\u00e7\u00e3o, usei o Render (cloud hosting) por ter uma vers\u00e3o gr\u00e1tis pra estudo.</p>"},{"location":"gestaoVagas/#como-fazer-isso","title":"Como fazer isso?","text":"<ul> <li>Fa\u00e7a login no Render usando sua conta do GitHub</li> <li>Fa\u00e7a as primeiras configura\u00e7\u00f5es simples, como configurar nome, banco de dados...</li> <li>Crie um dockerfile no seu projeto com a configura\u00e7\u00e3o do dockerfile config vista mais abaixo.</li> <li>Crie umnovo web service no Render, e fa\u00e7a o deploy com seu \u00faltimo commit no git.</li> </ul> <pre><code># =========================\n# Stage 1: Build\n# =========================\nFROM maven:3.9.3-eclipse-temurin-17 AS build\n\n# Define diret\u00f3rio de trabalho\nWORKDIR /app\n\n# Copia apenas o pom.xml para cache do Maven\nCOPY pom.xml .\n\n# Baixa depend\u00eancias sem reconstruir c\u00f3digo\nRUN mvn dependency:go-offline -B\n\n# Copia o c\u00f3digo-fonte\nCOPY src ./src\n\n# Build do projeto, gera o .jar\nRUN mvn clean package -DskipTests\n\n# =========================\n# Stage 2: Runtime\n# =========================\nFROM openjdk:17-jdk-slim\n\n# Define diret\u00f3rio de trabalho\nWORKDIR /app\n\n# Copia o .jar do stage de build\nCOPY --from=build /app/target/gestao_vagas-0.0.1-SNAPSHOT.jar app.jar\n\n# Exp\u00f5e a porta do Spring Boot\nEXPOSE 8080\n\n# Comando para rodar a aplica\u00e7\u00e3o\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n\n\nENTRYPOINT [ \"java\", \"-jar\", \"app.jar\" ]\n</code></pre>"},{"location":"gestaoVagas/#criando-um-banco-de-dados-e-webserver-na-aws-com-rds-e-ec2","title":"Criando um banco de dados e webserver na AWS com RDS e EC2","text":"<ul> <li>Crie uma conta na Amazon AWS </li> <li>Pesquise por RDS e v\u00e1 em criar banco de dados  </li> <li>Escolhaa standard creation &gt; PostgreSQL &gt; Models: Free tier &gt; Create database  </li> <li>Pesquise por EC2  </li> <li>AMI - Kernel6.1 - free &gt; Instance: t3.MICRO - free  </li> <li>Crie um par de chaves: RSA &gt; .pem  </li> <li>Execute a instancia e fa\u00e7a a conex\u00e3o</li> </ul>"},{"location":"gestaoVagas/#criando-dockerhub","title":"Criando DockerHub","text":"<ul> <li>Com o DockerHub, voc\u00ea pode salvar uma imagem pronta pra uso da sua aplica\u00e7\u00e3o, da mesma forma que voc\u00ea salva seu c\u00f3digo no GitHub.</li> <li>Voc\u00ea s\u00f3 precisa de um arquivo .yml na raiz do seu projeto, o meu ficou assim:</li> </ul> <pre><code>name: Gest\u00e3o de Vagas Application\non: \n    push:\n        branches: [main]\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Set up Java\n              uses: actions/setup-java@v3\n              with:\n                distribution: temurin\n                java-version: 17\n            - name: Build project\n              run: mvn clean install\n            - name: login docker\n              run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}\n            - name: Build docker image\n              run: docker build -t felipevalboenodocker/gestao_vagas .\n            - name: Publish image\n              run: docker push felipevalboenodocker/gestao_vagas        \n</code></pre>"},{"location":"gestaoVagas/#obs","title":"OBS:","text":"<ul> <li>I used Putty to configure the Docker on EC2 AWS.</li> <li>I used a Database Client extension to conect a new postgrSQL to EC2 endpoint, and I change the DTABASE_URL on github to this new database that I create.</li> </ul>"},{"location":"gestaoVagas/#how-to-start-the-application-after-all-this-configurations","title":"How to start the application after all this configurations","text":"<ol> <li>Open your Putty app</li> <li>Connect on the saved session </li> <li>execute: cd ~/actions-runner</li> <li>Check on your github if the runner ar online, if not, execute: ./run.sh</li> <li>execute: docker start gestao-vagas </li> <li>execute: docker ps </li> <li>execute: docker logs gestao_vagas , check if the application started as well</li> <li>Open Swagger: http://:8080/swagger-ui/index.html an do a test."},{"location":"pagamento_stripe/","title":"\ud83d\udcbc Projeto Java: Pagamento com Stripe","text":"<p>Este \u00e9 um simples projeto pra testar a funcionalidade de tokeniza\u00e7\u00e3o de cart\u00e3o de cr\u00e9dito Com isso, as transa\u00e7\u00f5es ficam mais seguras, pois os dados do car\u00e3o s\u00e3o convertidos em um token, pelas API de cart\u00e3o como Strip ou Mercado Pago. Ou seja, o Token obtido pelo Strip, representa o cart\u00e3o com n\u00famero, CVC e Data. O back-end recebe esse token, e jamais armazena os dados reais do cart\u00e3o digitado pelo usu\u00e1rio no front-end.</p>"},{"location":"pagamento_stripe/#demonstracao-do-projeto","title":"Demonstra\u00e7\u00e3o do Projeto","text":"<p>Para executar, basta:   - Rodar a aplica\u00e7\u00e3o: mvn spring-boot:run  - Abrir no navegador: http://localhost:8085/</p> <p>Documenta\u00e7\u00e3o Stripe para testes</p> <p>Como obter as chaves de API?</p> <p>1 -  Crie uma conta em https://dashboard.stripe.com/</p> <p>2 - No canto inferior direito, v\u00e1 em: Desenvolvedores &gt; Chaves de API</p> <p>3 - Copie as  Chave public\u00e1vel e Chave secreta, e substitua respectivamente nas vari\u00e1veis do properties do projeto.</p>"},{"location":"solid/","title":"\ud83c\udf3f SOLID","text":"<p>\ud83d\udfe0  Single Responsibility Principle (SRP)     Princ\u00edpio da Responsabilidade \u00danica:</p> <pre><code> Uma classe deve ter apenas um motivo para mudar, ou seja, ela deve ter apenas uma responsabilidade.\n</code></pre> <pre><code>//exemplo ruim: Problema: A classe Relatorio tem duas responsabilidades: gerar relat\u00f3rio e salvar em arquivo.\nclass Relatorio {\n    public void gerarRelatorio() {\n        // gera relat\u00f3rio\n    }\n\n    public void salvarNoArquivo() {\n        // salva relat\u00f3rio em arquivo\n    }\n}\n\n//exemplo correto\nclass Relatorio {\n    public void gerarRelatorio() {\n        // gera relat\u00f3rio\n    }\n}\n\nclass RelatorioArquivo {\n    public void salvar(Relatorio relatorio) {\n        // salva relat\u00f3rio em arquivo\n    }\n}\n//Cada classe tem uma \u00fanica responsabilidade: gerar ou salvar.\n\n</code></pre> <p>Open/Closed Principle (OCP)     \ud83d\udfe0 Princ\u00edpio Aberto/Fechado:</p> <pre><code> Uma classe deve estar aberta para extens\u00e3o, mas fechada para modifica\u00e7\u00e3o.\n</code></pre> <pre><code>//exemplo ruim: Toda vez que voc\u00ea quiser adicionar uma opera\u00e7\u00e3o nova, precisa modificar a classe.\nclass Calculadora {\n    public double calcular(String tipo, double a, double b) {\n        if (tipo.equals(\"SOMA\")) return a + b;\n        else if (tipo.equals(\"MULT\")) return a * b;\n        return 0;\n    }\n}\n\n//exemplo correto:\ninterface Operacao {\n    double calcular(double a, double b);\n}\n\nclass Soma implements Operacao {\n    public double calcular(double a, double b) {\n        return a + b;\n    }\n}\n\nclass Multiplicacao implements Operacao {\n    public double calcular(double a, double b) {\n        return a * b;\n    }\n}\n\nclass Calculadora {\n    public double calcular(Operacao operacao, double a, double b) {\n        return operacao.calcular(a, b);\n    }\n}\nAgora, para adicionar uma nova opera\u00e7\u00e3o, basta criar uma nova classe que implemente Operacao, sem modificar a Calculadora.\n\n</code></pre> <p>Liskov Substitution Principle (LSP)     \ud83d\udfe0 Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov:</p> <pre><code> Classes derivadas devem poder ser substitu\u00eddas por suas classes base sem quebrar o funcionamento do programa.\n</code></pre> <pre><code>Exemplo ruim:Pinguim n\u00e3o pode substituir Ave porque lan\u00e7a exce\u00e7\u00e3o ao chamar voar().\n\nclass Ave {\n    public void voar() {}\n}\n\nclass Pinguim extends Ave {\n    public void voar() {\n        throw new UnsupportedOperationException(\"Pinguins n\u00e3o voam!\");\n    }\n}\n\nExemplo correto: \n\ninterface Ave {\n}\n\ninterface AveQueVoa {\n    void voar();\n}\n\nclass Pardal implements AveQueVoa {\n    public void voar() {\n        System.out.println(\"Pardal voando\");\n    }\n}\n\nclass Pinguim implements Ave {\n    // Pinguim n\u00e3o implementa AveQueVoa\n}\n\n//Cada classe implementa apenas o que faz sentido, evitando viola\u00e7\u00f5es do LSP.\n\n</code></pre> <p>Interface Segregation Principle (ISP)     \ud83d\udfe0 Princ\u00edpio da Segrega\u00e7\u00e3o de Interfaces:</p> <pre><code> Muitas interfaces espec\u00edficas s\u00e3o melhores que uma interface \u00fanica e gen\u00e9rica.\n</code></pre> <pre><code>Exemplo ruim: Rob\u00f4 n\u00e3o tira f\u00e9rias, mas \u00e9 for\u00e7ado a implementar.\ninterface Trabalhador {\n    void trabalhar();\n    void tirarFerias();\n}\n\nclass Funcionario implements Trabalhador {\n    public void trabalhar() { }\n    public void tirarFerias() { }\n}\n\nclass Robo implements Trabalhador {\n    public void trabalhar() { }\n    public void tirarFerias() {\n        throw new UnsupportedOperationException();\n    }\n}\n\nExemplo correto: \ninterface Trabalhador {\n    void trabalhar();\n}\n\ninterface Ferias {\n    void tirarFerias();\n}\n\nclass Funcionario implements Trabalhador, Ferias {\n    public void trabalhar() { }\n    public void tirarFerias() { }\n}\n\nclass Robo implements Trabalhador {\n    public void trabalhar() { }\n}\n\n//Agora as classes implementam apenas o que \u00e9 relevante.\n\n</code></pre> <p>Dependency Inversion Principle (DIP)     \ud83d\udfe0 Princ\u00edpio da Invers\u00e3o de Depend\u00eancia:</p> <pre><code> Dependa de abstra\u00e7\u00f5es, n\u00e3o de implementa\u00e7\u00f5es concretas.\n</code></pre> <pre><code>Exemplo ruim: UsuarioService depende de uma implementa\u00e7\u00e3o concreta (MySQLDatabase).\nclass MySQLDatabase {\n    public void salvar() {}\n}\n\nclass UsuarioService {\n    private MySQLDatabase db = new MySQLDatabase();\n\n    public void salvarUsuario() {\n        db.salvar();\n    }\n}\n// Exemplo correto: UsuarioService agora depende de uma abstra\u00e7\u00e3o (Database) e n\u00e3o de uma implementa\u00e7\u00e3o concreta.\n\ninterface Database {\n    void salvar();\n}\n\nclass MySQLDatabase implements Database {\n    public void salvar() {}\n}\n\nclass UsuarioService {\n    private Database db;\n\n    public UsuarioService(Database db) {\n        this.db = db;\n    }\n\n    public void salvarUsuario() {\n        db.salvar();\n    }\n}\n\n// Uso\nDatabase db = new MySQLDatabase();\nUsuarioService service = new UsuarioService(db);\nservice.salvarUsuario();\n\n</code></pre>"},{"location":"solid/#principio-x-objetivo","title":"Princ\u00edpio X Objetivo","text":"<ul> <li>SRP   Uma classe = uma responsabilidade</li> <li>OCP   Aberta para extens\u00e3o, fechada para modifica\u00e7\u00e3o</li> <li>LSP   Subclasses podem substituir a superclasse</li> <li>ISP   Interfaces espec\u00edficas &gt; interface \u00fanica gigante</li> <li>DIP   Dependa de abstra\u00e7\u00f5es, n\u00e3o de concretos</li> </ul>"}]}